name: Docker Build and Release

on:
  push:
    branches:
      - main # Or your primary branch, e.g., master
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v2.1.1
  pull_request:
    branches:
      - main # Or your primary branch (builds but does not push)

jobs:
  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read # To checkout the repository
      packages: write # To push packages to GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional: Set up QEMU for multi-platform builds (e.g., arm64)
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Enables more advanced build features like multi-platform builds and caching
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Your GitHub username or organization
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions automatically provides this token

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # e.g., ghcr.io/your-username/your-repo-name
          tags: |
            # Tag 'latest' for pushes to the default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with the Git SHA (short format)
            type=sha,prefix=,suffix=,format=short
            # Tag with the Git tag if this is a tag event (e.g., v1.0.0)
            type=ref,event=tag

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: . # Assumes your Dockerfile is in the root of the repository.
                     # Change to './client' if your Dockerfile and build context are in the 'client' directory.
          file: ./Dockerfile # Path to your Dockerfile, relative to the context.
          push: ${{ github.event_name != 'pull_request' }} # Only push if not a pull request
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable build cache to GitHub Actions cache

      - name: Image digest
        if: steps.build-and-push.outputs.digest && github.event_name != 'pull_request'
        run: echo "Pushed image with digest: ${{ steps.build-and-push.outputs.digest }}"